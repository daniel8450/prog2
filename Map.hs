--module Map
  --where
import Data.List

list :: [Char]
list =          ['_','_','_','_','_','_','_','_', 
                 '_','_','_','_','_','*','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_',
                 '_','_','_','_','_','_','_','_']
                 
                 
takeIt :: [Char] -> Int -> [Char]
takeIt x n = take n x

printIt :: [Char] -> [Char]
printIt x = printIt (print x)
                                          
up :: [Char] -> Int -> [Char]
up x n = drop n x

--down :: [Char] -> Int -> [Char]
--down x n = [new_element : x | x <- [0..n]]

main = do
     let x = (up list 8)
     let xs = (takeIt x 8)
     printIt xs
     --print x
     --print xs
 
     
  
